GraphQL APIs:
- https://countries.trevorblades.com/
- https://api.spacex.land/graphql/ 


Schema:
{
  "_queryType": "Query",
  "_mutationType": null,
  "_subscriptionType": null,
  "_directives":["@cacheControl", "@skip","@include","@deprecated"],
  "_typeMap": {
    "Query":"Query",
    "ContinentFilterInput": "ContinentFilterInput",
    "StringQueryOperatorInput": "StringQueryOperatorInput",
    "String": "String",
    "Continent": "Continent", *
    "ID": "ID", *
    "Country": "Country", *
    "Language": "Language", *
    "Boolean": "Boolean",
    "State": "State", * O
    "CountryFilterInput": "CountryFilterInput",
    "LanguageFilterInput": "LanguageFilterInput",
    "__Schema": "__Schema",
    "__Type": "__Type",
    "__TypeKind": "__TypeKind",
    "__Field": "__Field",
    "__InputValue": "__InputValue",
    "__EnumValue": "__EnumValue",
    "__Directive": "__Directive",
    "__DirectiveLocation": "__DirectiveLocation",
    "CacheControlScope": "CacheControlScope",
    "Upload": "Upload",
    "Int": "Int"
  },
  "_subTypeMap": {},
  "_implementationsMap": {}
}

  const [accordion, setAccordion] = useState({
    accordionValue: 'collapsed',
    editorToGrab: null,
    divWrapper: null,
    btnText: 'expand',
  });
  const [editor, setEditor] = useState('');

  const { displayName, language, value, onChange, theme } = props;

  const handleAccordian = () => {
    console.log('Editor.jsx: handleAccordion');
    // Grabs full expanded height of editor instance
    const sizer = accordion.divWrapper.querySelector('.CodeMirror-sizer').style
      .minHeight;
    if (accordion.accordionValue === 'collapsed') {
      accordion.divWrapper.style.height = sizer;
      accordion.divWrapper.style.maxHeight = sizer;
      setAccordion((prev) => {
        return { ...prev, accordionValue: 'expanded', btnText: 'collapse' };
      });
    } else if (accordion.accordionValue === 'expanded') {
      accordion.divWrapper.style.maxHeight = '150px';
      accordion.divWrapper.style.height = '150px';
      setAccordion((prev) => {
        return { ...prev, accordionValue: 'collapsed', btnText: 'expand' };
      });
    }
    // CSS transition runs asynchronously. refresh async so it's invoked after css transition animation
    setTimeout(() => {
      accordion.editorToGrab.refresh();
    }, 100);
  };

        <button
        className={'widget-btn widget-btn--nord'}
        onClick={() => {
          handleAccordian();
        }}
      >
        {accordion.btnText}
      </button>


                // setAccordion((prev) => {
          //   return {
          //     ...prev,
          //     editorToGrab: editor,
          //     divWrapper: editor.display.wrapper,
          //   };
          // });
          // console.log('value');